/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/* #__PURE__ */

/* Z+1 */

/* eslint-disable valid-jsdoc, @typescript-eslint/no-unused-vars */

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

/* harmony default export */

/* import() */

/* n */

/* o */

/* webpack/runtime/create fake namespace object */

/* webpack/runtime/jsonp chunk loading */

/* webpack/runtime/load script */

/*#__PURE__*/

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
   * A POP indicates a change to an arbitrary index in the history stack, such
   * as a back or forward navigation. It does not describe the direction of the
   * navigation, only that the current index changed.
   *
   * Note: This is the default action for newly created history objects.
   */

/**
   * A PUSH indicates a new entry being added to the history stack, such as when
   * a link is clicked and a new page loads. When this happens, all subsequent
   * entries in the stack are lost.
   */

/**
   * A REPLACE indicates the entry at the current index in the history stack
   * being replaced by a new one.
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
 * @deprecated
 *
 * **We recommend using the `configureStore` method
 * of the `@reduxjs/toolkit` package**, which replaces `createStore`.
 *
 * Redux Toolkit is our recommended approach for writing Redux logic today,
 * including store setup, reducers, data fetching, and more.
 *
 * **For more details, please read this Redux docs page:**
 * **https://redux.js.org/introduction/why-rtk-is-redux-today**
 *
 * `configureStore` from Redux Toolkit is an improved version of `createStore` that
 * simplifies setup and helps avoid common bugs.
 *
 * You should not be using the `redux` core package by itself today, except for learning purposes.
 * The `createStore` method from the core `redux` package will not be removed, but we encourage
 * all users to migrate to using Redux Toolkit for all Redux code.
 *
 * If you want to use `createStore` without this visual deprecation warning, use
 * the `legacy_createStore` import instead:
 *
 * `import { legacy_createStore as createStore} from 'redux'`
 *
 */

/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * @private
 *
 * When processing relative navigation we want to ignore ancestor routes that
 * do not contribute to the path, such that index/pathless layout routes don't
 * interfere.
 *
 * For example, when moving a route element into an index route and/or a
 * pathless layout route, relative link behavior contained within should stay
 * the same.  Both of the following examples should link back to the root:
 *
 *   <Route path="/">
 *     <Route path="accounts" element={<Link to=".."}>
 *   </Route>
 *
 *   <Route path="/">
 *     <Route path="accounts">
 *       <Route element={<AccountsLayout />}>       // <-- Does not contribute
 *         <Route index element={<Link to=".."} />  // <-- Does not contribute
 *       </Route
 *     </Route>
 *   </Route>
 */

/**
 * @private
 * Indirection to leverage useAsyncValue for a render-prop API on <Await>
 */

/**
 * @private
 */

/**
 * @remix-run/router v1.3.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */

/**
 * A <Link> wrapper that knows if it's "active" or not.
 */

/**
 * A `<Router>` for use in web browsers. Provides the cleanest URLs.
 */

/**
 * A `<Router>` for use in web browsers. Stores the location in the hash
 * portion of the URL so it is not sent to the server.
 */

/**
 * A container for a nested tree of <Route> elements that renders the branch
 * that best matches the current location.
 *
 * @see https://reactrouter.com/components/routes
 */

/**
 * A convenient wrapper for reading and writing search parameters via the
 * URLSearchParams interface.
 */

/**
 * A hook to access the redux `dispatch` function.
 *
 * @returns {any|function} redux store's `dispatch` function
 *
 * @example
 *
 * import React, { useCallback } from 'react'
 * import { useDispatch } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const dispatch = useDispatch()
 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
 *   return (
 *     <div>
 *       <span>{value}</span>
 *       <button onClick={increaseCounter}>Increase counter</button>
 *     </div>
 *   )
 * }
 */

/**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */

/**
 * A hook to access the redux store.
 *
 * @returns {any} the redux store
 *
 * @example
 *
 * import React from 'react'
 * import { useStore } from 'react-redux'
 *
 * export const ExampleComponent = () => {
 *   const store = useStore()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * Actions represent the type of change to a location value.
 */

/**
 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
 *
 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
 * during build.
 * @param {number} code
 */

/**
 * Browser history stores the location in regular URLs. This is the standard for
 * most web apps, but it requires some configuration on the server to ensure you
 * serve the same app at multiple URLs.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory
 */

/**
 * Changes the current location.
 *
 * Note: This API is mostly useful in React.Component subclasses that are not
 * able to use hooks. In functional components, we recommend you use the
 * `useNavigate` hook instead.
 *
 * @see https://reactrouter.com/components/navigate
 */

/**
 * Check if the given error is an ErrorResponse generated from a 4xx/5xx
 * Response thrown from an action/loader
 */

/**
 * Component to use for rendering lazily loaded data from returning defer()
 * in a loader function
 */

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

/**
 * Computes all combinations of optional path segments for a given path,
 * excluding combinations that are ambiguous and of lower priority.
 *
 * For example, `/one/:two?/three/:four?/:five?` explodes to:
 * - `/one/three`
 * - `/one/:two/three`
 * - `/one/three/:four`
 * - `/one/three/:five`
 * - `/one/:two/three/:four`
 * - `/one/:two/three/:five`
 * - `/one/three/:four/:five`
 * - `/one/:two/three/:four/:five`
 */

/**
 * Connects a React component to a Redux store.
 *
 * - Without arguments, just wraps the component, without changing the behavior / props
 *
 * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior
 * is to override ownProps (as stated in the docs), so what remains is everything that's
 * not a state or dispatch prop
 *
 * - When 3rd param is passed, we don't know if ownProps propagate and whether they
 * should be valid component props, because it depends on mergeProps implementation.
 * As such, it is the user's responsibility to extend ownProps interface from state or
 * dispatch props or both when applicable
 *
 * @param mapStateToProps A function that extracts values from state
 * @param mapDispatchToProps Setup for dispatching actions
 * @param mergeProps Optional callback to merge state and dispatch props together
 * @param options Options for configuring the connection
 *
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 */

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Creates a Location object with a unique key from the given Path
 */

/**
 * Creates a Redux store that holds the state tree.
 *
 * **We recommend using `configureStore` from the
 * `@reduxjs/toolkit` package**, which replaces `createStore`:
 * **https://redux.js.org/introduction/why-rtk-is-redux-today**
 *
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
 * Creates a URLSearchParams object using the given initializer.
 *
 * This is identical to `new URLSearchParams(init)` except it also
 * supports arrays as values in the object form of the initializer
 * instead of just strings. This is convenient when you need multiple
 * values for a given key, but don't want to use an array initializer.
 *
 * For example, instead of:
 *
 *   let searchParams = new URLSearchParams([
 *     ['sort', 'name'],
 *     ['sort', 'price']
 *   ]);
 *
 * you can do:
 *
 *   let searchParams = createSearchParams({
 *     sort: ['name', 'price']
 *   });
 */

/**
 * Creates a route config from a React "children" object, which is usually
 * either a `<Route>` element or an array of them. Used internally by
 * `<Routes>` to create a route config from its children.
 *
 * @see https://reactrouter.com/utils/create-routes-from-children
 */

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

/**
 * Creates a string URL path from the given pathname, search, and hash components.
 */

/**
 * Declares an element that should be rendered at a certain URL path.
 *
 * @see https://reactrouter.com/components/route
 */

/**
 * For browser-based histories, we combine the state and key into an object
 */

/**
 * Handles the click behavior for router `<Link>` components. This is useful if
 * you need to create custom `<Link>` components with the same click behavior we
 * use in our exported `<Link>`.
 */

/**
 * Hash history stores the location in window.location.hash. This makes it ideal
 * for situations where you don't want to send the location to the server for
 * some reason, either because you do cannot configure it or the URL space is
 * reserved for something else.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory
 */

/**
 * Hook factory, which creates a `useDispatch` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useDispatch` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useSelector` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useSelector` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useStore` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useStore` hook bound to the specified context.
 */

/**
 * Infers the type of props that a connector will inject into a component.
 */

/**
 * Inlined into the react-router repo since use-sync-external-store does not
 * provide a UMD-compatible package, so we need this to be able to distribute
 * UMD react-router bundles
 */

/**
 * Matches the given routes to a location and returns the match data.
 *
 * @see https://reactrouter.com/utils/match-routes
 */

/**
 * Memory history stores the current location in memory. It is designed for use
 * in stateful non-browser environments like tests and React Native.
 */

/**
 * Parses a string URL path into its separate pathname, search, and hash components.
 */

/**
 * Performs pattern matching on a URL pathname and returns information about
 * the match.
 *
 * @see https://reactrouter.com/utils/match-path
 */

/**
 * Provides location context for the rest of the app.
 *
 * Note: You usually won't render a <Router> directly. Instead, you'll render a
 * router that is more specific to your environment such as a <BrowserRouter>
 * in web browsers or a <StaticRouter> for server rendering.
 *
 * @see https://reactrouter.com/router-components/router
 */

/**
 * React Router DOM v6.8.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */

/**
 * React Router v6.8.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */

/**
 * Renders the child route's element, if there is one.
 *
 * @see https://reactrouter.com/components/outlet
 */

/**
 * Renders the result of `matchRoutes()` into a React element.
 */

/**
 * Resolves the pathname of the given `to` value against the current location.
 *
 * @see https://reactrouter.com/hooks/use-resolved-path
 */

/**
 * Returns a path with params interpolated.
 *
 * @see https://reactrouter.com/utils/generate-path
 */

/**
 * Returns a resolved path object relative to the given pathname.
 *
 * @see https://reactrouter.com/utils/resolve-path
 */

/**
 * Returns an imperative method for changing the location. Used by <Link>s, but
 * may also be used by other elements to change the location.
 *
 * @see https://reactrouter.com/hooks/use-navigate
 */

/**
 * Returns the current location object, which represents the current URL in web
 * browsers.
 *
 * Note: If you're using this it may mean you're doing some of your own
 * "routing" in your app, and we'd like to know what your use case is. We may
 * be able to provide something higher-level to better suit your needs.
 *
 * @see https://reactrouter.com/hooks/use-location
 */

/**
 * Returns the current navigation action which describes how the router came to
 * the current location, either by a pop, push, or replace on the history stack.
 *
 * @see https://reactrouter.com/hooks/use-navigation-type
 */

/**
 * Returns the current navigation, defaulting to an "idle" navigation when
 * no navigation is in progress
 */

/**
 * Returns the element of the route that matched the current location, prepared
 * with the correct context to render the remainder of the route tree. Route
 * elements in the tree must render an <Outlet> to render their child route's
 * element.
 *
 * @see https://reactrouter.com/hooks/use-routes
 */

/**
 * Returns the full href for the given "to" value. This is useful for building
 * custom links that are also accessible and preserve right-click behavior.
 *
 * @see https://reactrouter.com/hooks/use-href
 */

/**
 * Returns the happy-path data from the nearest ancestor <Await /> value
 */

/**
 * Returns the nearest ancestor Route error, which could be a loader/action
 * error or a render error.  This is intended to be called from your
 * errorElement to display a proper error message.
 */

/**
 * Returns true if this component is a descendant of a <Router>.
 *
 * @see https://reactrouter.com/hooks/use-in-router-context
 */

/**
 * The interface for the navigate() function returned from useNavigate().
 */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * This is a shortcut for creating `application/json` responses. Converts `data`
 * to JSON and sets the `Content-Type` header.
 */

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */

/** @class */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** A function that accepts a potential "extra argument" value to be injected later,
 * and returns an instance of the thunk middleware that uses that value
 */

/************************************************************************/

/******/

/***/

/*break*/

/*return*/

/*yield*/

//

//    is used by selectorFactory to decide if it should reinvoke on props changes.

//    new function as the true mapToProps for subsequent calls.

//    the developer that their mapToProps function is not returning a valid result.

//   and causing memory leaks

//  * Detects whether the mapToProps function being called depends on props, which

//  * On first call, handles mapToProps if returns another function, and treats that

//  * On first call, verifies the first result is a plain object, in order to warn

//  It seems that the dispatch argument

//  and a state object in some others (ex: whenMapStateToPropsIsMissing)

//  could be a dispatch function in some cases (ex: whenMapDispatchToPropsIsMissing)

// * Note:

// - However, we may have gotten new wrapper props after that

// - This render may have been triggered by a Redux store update that produced new child props

// - we extract this to a separate function to avoid closing over values

// - we need to fall back to `useEffect` in SSR to avoid annoying warnings

// /user-preferences since `-` counts as a word boundary.

// 0 means "already installed".

// @ts-expect-error

// @ts-ignore

// @ts-ignore 'AnyAction' is assignable to the constraint of type 'A', but 'A' could be instantiated with a different subtype

// A length of one signals that mapToProps does not depend on props from the parent component.

// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and

// Actually run the selector with the most recent store state and wrapper props

// Actually subscribe to the nearest connected ancestor (or store)

// Add a hacky cast to get the right output type

// Add the children before adding this route to the array so we traverse the

// All child paths with the prefix.  Do this for all children before the

// Allow injecting another batching function later

// Already tracked promise - check contents

// Any reducers that existed in both the new and old rootReducer

// Attach the factory function so users can create a customized version

// Avoid failures from read-only properties

// Avoid kicking off multiple navigations if we're in the middle of a

// Avoid unhandled rejection warnings

// Based on the previous check, one of these must be true

// Because of that, the useSyncExternalStore compat shim is needed.

// But that's a pretty big refactor to the current test suite so going to

// But, if we have new wrapper props, those might change the child props, so we have to recalculate things.

// By explicitly using `prop-types` you are opting into new production behavior.

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toPrimitive.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js

// CONCATENATED MODULE: ./node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/stylis/dist/stylis.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js

// CONCATENATED MODULE: ./node_modules/@remix-run/router/dist/router.js

// CONCATENATED MODULE: ./node_modules/immer/dist/immer.esm.mjs

// CONCATENATED MODULE: ./node_modules/react-icons/lib/esm/iconContext.js

// CONCATENATED MODULE: ./node_modules/react-icons/lib/esm/iconsManifest.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/components/Provider.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/components/connect.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/invalidArgFactory.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapDispatchToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapStateToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mergeProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/selectorFactory.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/wrapMapToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useDispatch.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useReduxContext.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useSelector.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useStore.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/index.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/Subscription.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/batch.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/bindActionCreators.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/shallowEqual.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/useSyncExternalStore.js

// CONCATENATED MODULE: ./node_modules/react-router-dom/dist/index.js

// CONCATENATED MODULE: ./node_modules/react-router/dist/index.js

// CONCATENATED MODULE: ./node_modules/redux-thunk/es/index.js

// CONCATENATED MODULE: ./node_modules/redux/es/redux.js

// CONCATENATED MODULE: ./node_modules/styled-components/dist/styled-components.browser.esm.js

// CONCATENATED MODULE: ./src/components/App/index.jsx

// CONCATENATED MODULE: ./src/components/AppVariants/index.jsx

// CONCATENATED MODULE: ./src/components/Display/index.jsx

// CONCATENATED MODULE: ./src/components/ErrorBoudaries/index.jsx

// CONCATENATED MODULE: ./src/components/ErrorBoudaries/styled.js

// CONCATENATED MODULE: ./src/components/Header/index.jsx

// CONCATENATED MODULE: ./src/components/History/index.jsx

// CONCATENATED MODULE: ./src/components/Keypad/index.jsx

// CONCATENATED MODULE: ./src/components/Modal/index.jsx

// CONCATENATED MODULE: ./src/components/Modal/styled.js

// CONCATENATED MODULE: ./src/constants/keypadConstansts.js

// CONCATENATED MODULE: ./src/constants/theme.js

// CONCATENATED MODULE: ./src/globalStyles.js

// CONCATENATED MODULE: ./src/pages/Calculator/index.jsx

// CONCATENATED MODULE: ./src/pages/Settings/index.jsx

// CONCATENATED MODULE: ./src/store/index.js

// CONCATENATED MODULE: ./src/utils/calculator.js

// CONCATENATED MODULE: ./src/utils/commands.js

// Capture values for checking if and when this component unmounts

// Caught a render error, provide it as a rejected promise

// Check if module is in cache

// Create a new module (and put it into the cache)

// DCE check should happen before ReactDOM bundle executes so that

// Default to a dummy "batch" implementation that just runs the callback

// Define some constant arrays just to avoid re-creating these

// DevTools can report bad minification during injection.

// DevTools shouldn't crash React, no matter what.

// Didn't get a promise - provide as a resolved promise

// Distinguish between actual "data" props that were passed to the wrapper component,

// Don't bail if we have data router errors so we can render them in the

// Don't run stale listeners.

// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js

// EXTERNAL MODULE: ./node_modules/prop-types/index.js

// EXTERNAL MODULE: ./node_modules/react/index.js

// Each leading .. segment means "go up one route" instead of "go up one

// Effect callback, extracted: assign the latest props values to refs for later usage

// Effect callback, extracted: subscribe to the Redux store or nearest connected ancestor,

// Enable batched updates in our subscriptions for use

// Encode a Location the same way window.location would

// Ensure the pathname has a trailing slash if the original "to" had one

// Execute the module function

// Freeze the UI by throwing a never resolved promise

// If React sees the exact same element reference as last time, it bails out of re-rendering

// If a pathname is explicitly provided in `to`, it should be relative to the

// If our path is non-empty and contains anything beyond an initial slash,

// If the URL hasn't changed, a regular <a> will do a replace instead of

// If the child props haven't changed, nothing to do here - cascade the subscription update

// If the render was from a store update, clear out that reference and cascade the subscriber update

// If there are more ".." segments than parent routes, resolve relative to

// If this "action" is really a function, call it and return the result.

// If this was a render error, we put it in a RouteError context inside

// If two routes are siblings, we should try to match the earlier sibling

// If we have data errors, trim matches to the highest error boundary

// If we have new child props, and the same wrapper props, we know we should use the new child props as-is.

// If we're not changing locations, preserve the location but still surface

// If we're not subscribed to the store, nothing to do here

// If we're operating within a basename, prepend it to the pathname prior

// If you want to start measuring performance in your app, pass a function

// Ignore everything but left clicks

// Ignore non-elements. This allows people to more easily inline

// Important!

// In that case, throw the error from here so it doesn't get lost.

// Incoming pathnames are generally encoded from either window.location

// Index should only be null when we initialize. If not, it's because the

// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of

// Inlined version of the `symbol-observable` polyfill

// Intentionally not using named imports because Rollup uses dynamic

// Intepret empty string as omitting an optional segment

// It's possible that we caught an error due to a bad mapState function, but the

// JSONP chunk loading for javascript

// Keep the root "" segment so the pathname starts at /

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

// Matches logic in React's `shared/ExecutionEnvironment` file

// No errorElement, throw to the nearest route-level error boundary

// Now that all that's done, we can finally try to actually render the child component.

// Only data routers handle errors

// Only wrap in an error boundary within data router usages when we have an

// Optional path segments are denoted by a trailing `?`

// Otherwise look for errors from our data router state

// Otherwise, it doesn't really make sense to rank non-siblings by index,

// Otherwise, pass the action down the middleware chain as usual

// Our types know better, but runtime JS may not!

// Preserve trailing slashes on basename, so we can let the user control

// Pull data from the store after first render in case the store has

// Raw (untracked) promise - track it

// Re-encode pathnames that were decoded inside matchRoutes

// React currently throws a warning when using useLayoutEffect on the server.

// React v16.11 and below

// React v16.12 and above

// Reducer initial state creation for our update reducer

// Redux doesn't guarantee unsubscriptions happen until next dispatch.

// Render children with resolved value

// Render the absolute href server- and client-side

// Render via our errorElement

// Rendered into <a href> for relative URLs

// Return the exports of the module

// Routes without a path shouldn't ever match by themselves unless they are

// Routing is relative to the current pathname if explicitly requested.

// SVG-related properties

// Save references to the new child props.  Note that we track the "child props from store update"

// See https://bugzilla.mozilla.org/show_bug.cgi?id=878297

// So, we'll use the child props from store update only if the wrapper props are the same as last time.

// Strip the protocol/origin/basename for same-origin absolute URLs

// Supply a getter just to skip dealing with ESM bindings

// TODO Can this get pulled out so that we can subscribe directly to the store if we don't need ownProps?

// TODO This is hacky and not how `uSES` is meant to be used

// TODO This is incredibly hacky. We've already processed the store update and calculated new child props,

// TODO We're currently calling getState ourselves here, rather than letting `uSES` do it

// TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing

// TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.

// TODO: Add more comments

// TODO: Can this as be avoided?

// TODO: This could be cleaned up.  push/replace should probably just take

// TODO: how set adaptive height in px

// Test for A's keys different from B.

// The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.

// The chunk loading function for additional chunks

// The module cache

// The primary entry point assumes we're working with standard ReactDOM/RN, but

// The require function

// The selector returned by selectorFactory will memoize its results,

// The thunk middleware looks for any functions that were passed to `store.dispatch`.

// Then if this is an optional value, add all child versions without

// They are going to lose state here, but there is no real

// This Subscription's source should match where store came from: props vs. context. A component

// This action has a similiar effect to ActionTypes.INIT.

// This entry need to be wrapped in an IIFE because it need to be in strict mode.

// This error is thrown as a convenience so you can more easily

// This file contains only the entry chunk.

// This function allow to reference async chunks

// This gives us a mechanism to recover from the error when the location changes.

// This is "just" a `useLayoutEffect`, but with two modifications:

// This is used to make sure we don't warn about the same

// This shouldn't happen as long as we do top-down subscriptions correctly, but

// Throw to the suspense boundary

// To get around it, we can conditionally useEffect on the server (no-op) and

// To maintain the wrapperProps object reference, memoize this destructuring.

// Track how deep we got in our render pass to emulate SSR componentDidCatch

// Transparently support React.Fragment and its children.

// Tricky logic here:

// Trigger the React `useSyncExternalStore` subscriber

// URL segment".  This is a key difference from how <a href> works and a

// UTILS

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,

// Verify that the code above has been dead code eliminated (DCE'd).

// We memoize the elements for the rendered child component as an optimization.

// We need this to execute synchronously every time we re-render. However, React warns

// We need to compute the pathnameBase here using the raw splat value

// We should still report in case we break this code.

// We want to capture the wrapper props and child props we used for later comparisons

// We want to leave trailing slash behavior in the user's control, so if they

// We'll run this callback every time a store subscription update propagates to this component

// Welcome to debugging @remix-run/router!

// When a store is created, an "INIT" action is dispatched so that every

// When a user passes in a `locationArg`, the associated routes need to

// When matching to the end, ignore trailing slashes

// When we get into an error state, the user will likely click "back" to the

// Whether we're in an error state or not, we update the location in state

// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded

// `["one", "", "three"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`

// `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in

// `to` values that do not provide a pathname. `to` can simply be a search or

// a Promise means "currently loading".

// a push, so do the same here unless the replace prop is explicitly set

// a submitting/loading state

// about useLayoutEffect in SSR, so we try to detect environment and fall back to

// actualChildProps: unknown,

// add "moreModules" to the modules object,

// all chunks have JS

// allow detectFactoryAndVerify to get ownProps

// allowing connect's shouldComponentUpdate to return false if final

// ancestor components re-render before descendants

// and values needed to control behavior (forwarded refs, alternate context instances).

// any new errors that may come through. We retain the existing error, we do

// application, that will have no effect--the error page continues to display.

// as a ref instead of a useState/useReducer because we need a way to determine if that value has

// available, otherwise a store update may happen between render and the effect,

// avoid mem leaks in IE.

// basename which allows the basename to have full control over the presence

// be wrapped in a new `LocationContext.Provider` in order for `useLocation`

// been processed.  If this went into useState/useReducer, we couldn't clear out the value without

// behavior by simply putting routes with identical paths in the order they

// boundary.  Use the pre-matched (or shimmed) matches

// case we should log a warning as it will result in bugs.

// changed since we began.

// check for updates after dispatched actions, and trigger re-renders.

// child sections interspersed where deeper optional segments are higher than

// coarse-grain check for optional params

// comes in and the user recovers from the error.

// conditionals in their route config.

// connected to the store via props shouldn't use subscription from context, or vice versa.

// control over the presence of a trailing slash on root links

// create a fake namespace object

// create error before stack unwound to get useful stacktrace later

// data-router navigation, since components get re-rendered when we enter

// define __esModule on exports

// define getter functions for harmony exports

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args

// dispatch for CommonJS interop named imports.

// don't hoist over string (html) components

// enabling "pause on exceptions" in your JavaScript debugger.

// encapsulates the subscription logic for connecting a component to the redux store, as

// encoded here but there also shouldn't be anything to decode so this

// errorElement

// errorElement on this route.  Otherwise let it bubble up to an ancestor

// eslint-disable-next-line jsx-a11y/anchor-has-content

// eslint-disable-next-line no-console

// eslint-disable-next-line no-empty

// eslint-disable-next-line no-unused-vars

// eslint-disable-next-line react/display-name

// expose the modules object (__webpack_modules__)

// find the source for a warning that appears in the console by

// first, we avoid this issue

// first. This allows people to have fine-grained control over the matching

// for absolute paths, ensure `/` instead of empty segment

// forceComponentUpdateDispatch: React.Dispatch<any>,

// forcing another re-render, which we don't want.

// full Locations now and avoid the need to run through this flow at all

// getDefaultExport function for compatibility with non-harmony modules

// hash string, in which case we should assume that the navigation is relative

// history-aware.

// http://fb.me/prop-types-in-prod

// https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

// if we ever do those wrong, this throw will surface the error in our tests.

// in a DataStaticRouter

// index routes, so don't add them to the list of possible branches.

// install a JSONP callback for chunk loading

// instead of using params["*"] later because it will be decoded then

// is created synchronously, otherwise a store update may occur before the

// just useEffect instead to avoid the warning, since neither will run anyway.

// keep as is for the time being and just let any incoming keys take precedence

// keys multiple times.

// loadScript function to load a script via script tag

// major reason we call this a "to" value instead of a "href".

// match only if we find the end of this path segment.  Look for an optional

// migration guide from v5 as a means of disambiguation between `to` values

// mode & 16: return value when it's Promise-like

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// navigate to the raw basename which allows the basename to have full

// no HMR

// no HMR manifest

// no baseURI

// no module.id needed

// no module.loaded needed

// no on chunks loaded

// no prefetching

// no preloaded

// non-captured trailing slash (to match a portion of the URL) or the end

// object to store loaded and loading chunks

// of RenderErrorBoundary

// of a trailing slash on root links

// of the path (if we've matched to the end).  We used to do this with a

// older versions that do not include `useSyncExternalStore` (React 16.9 - 17.x).

// optional version for all children so we get consistent ordering where the

// or from router.navigate, but we want to match against the unencoded

// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals

// parent optional aspect is preferred as required.  Otherwise, we can get

// parent optional segments, where for example, /:two would explodes _earlier_

// parent re-rendered without this component and we're about to unmount.

// paths in the route definitions.  Memory router locations won't be

// previous page that didn't have an error. Because this wraps the entire

// probably be avoided if Subscription's listeners logic is changed to not call listeners

// props have not changed.

// reducer returns their initial state. This effectively populates

// route context. This is explained in `Note on `<Link to>` values` in our

// route tree depth-first and child routes appear before their parents in

// setup Promise in chunk cache

// should be a safe operation.  This avoids needing matchRoutes to be

// so that when we are in an error state, it gets reset when a new location

// so they sort equally.

// specify a basename with a trailing slash, we should support it

// src/autoBatchEnhancer.ts

// src/configureStore.ts

// src/createAction.ts

// src/createReducer.ts

// src/createSlice.ts

// src/entities/entity_state.ts

// src/getDefaultMiddleware.ts

// src/immutableStateInvariantMiddleware.ts

// src/index.ts

// src/isPlainObject.ts

// src/mapBuilders.ts

// src/nanoid.ts

// src/tsHelpers.ts

// src/utils.ts

// start chunk loading

// state defaults to `null` because `window.history.state` does

// subscription callback always has the selector from the latest render commit

// subscription is created and an inconsistent state may be observed

// that begin with `/` and those that do not. However, this is problematic for

// that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

// that have been unsubscribed in the  middle of the notification loop.

// the "flattened" version.

// the context consumer to use

// the enforcement of trailing slashes throughout the app

// the initial state tree.

// the location changing.

// the middle of the notification loop, where `subscription` will then be null. This can

// the new state tree with any relevant data from the old one.

// the root / URL.

// then /:one.  By always including the parent as required _for all children_

// then flag all "chunkIds" as loaded and fire callback

// then we have _some_ form of path in our regex so we should expect to

// therefore not reporting its length accurately..

// this because the error provided from the app state may be cleared without

// this function wraps mapToProps in a proxy function which does several things:

// to creating the href.  If this is a root navigation, then just use the raw

// to determine what the child props should be

// to handing off to history.  If this is a root navigation, then we

// to log results (for example: reportWebVitals(console.log))

// to the current location's pathname and *not* the route pathname.

// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine

// to use the scoped location instead of the global location.

// try...catch because iOS limits us to 100 pushState calls :/

// undefined = chunk not loaded, null = chunk preloaded/prefetched

// under certain conditions, notably when serving from a local HTML file

// use React's forwardRef to expose a ref of the wrapped component

// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store

// user called history.pushState or history.replaceState directly, in which

// want them tried.

// way to warn them about it since the page will refresh...

// webpackBootstrap

// well as nesting subscriptions of descendant components, so that we can ensure the

// whether mapToProps needs to be invoked when props have changed.

// which may cause missed updates; we also must ensure the store subscription

// will receive the previous state. This effectively populates

// window.location.origin is "null" (the literal string value) in Firefox

// with standard React renderers (ReactDOM, React Native)

// with whatever "extra arg" they want to inject into their thunks

// word boundary but that gives false positives on routes like

//# sourceMappingURL=immer.esm.js.map

//# sourceMappingURL=index.js.map

//# sourceMappingURL=styled-components.browser.esm.js.map

//#endregion

//#region Hooks

//#region Routers

//#region Types and Constants

//#region createStaticHandler

///////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
